<?xml version="1.0"?>
<launch>

  <arg name="sim" default="false" />
  <arg name="robot_ip" default="127.0.0.1" doc="specify robot IP address"/>
  <arg name="ur_robot" default="ur10e" doc="choose robot type: ur5, ur10e" />
  <arg name="Mia_COM" default='0' doc="Int number of the Mia hand COM port" />
  <arg name="Mia_fs" default='20' doc="Hz, frequency of the control loop of the Mia Hw interface" />
  <arg name="Mia_hw_sim" default="false" doc="set to true to simulate mia hand hardware interface (requires to emulate a serial port)" />

  <!-- Load the path of the config file of the Mia trasnsmission -->
	<param name="mia_transmissions_config_" type="string" value="$(find mia_hand_description)/calibration/transmission_config.yaml" />

  <!-- Check robot type (simulated or real) and prepare the right kinematics_config -->
  <arg name="ur_sim" value="$(eval robot_ip == '127.0.0.1')" />
  <arg if="$(eval ur_sim and (ur_robot == 'ur10e'))" name="kinematics_config" value="192.168.1.100"/>
  <arg if="$(eval ur_sim and (ur_robot == 'ur5'))" name="kinematics_config" value="192.168.1.50"/>
  <arg if="$(eval not ur_sim)" name="kinematics_config" value="$(arg robot_ip)" doc="specify robot calibration IP address"/>
  <param name="kinematics_config" value="$(arg kinematics_config)" />

  <group if="$(arg sim)">

    <!-- Make use of UR robot bringup from ur_gazebo-->
    <include file="$(find ur_gazebo)/launch/$(arg ur_robot)_bringup.launch" >
      <arg name="robot_description_file" value="$(find artificial_hands_bringup)/launch/inc/load_mia_hand_on_$(arg ur_robot).launch.xml" />
      <arg name="stopped_controllers" value="joint_group_pos_controller" />
      <arg name="kinematics_params" value="$(find artificial_hands_bringup)/config/kinematics_config_$(arg kinematics_config).yaml" />
    </include>

    <!-- Load Mia hand controllers to parameter server -->
    <rosparam file="$(find mia_hand_gazebo)/config/mia_hand_trajectory_controllers.yaml" command="load"/>
    <rosparam file="$(find mia_hand_gazebo)/config/gazebo_pid_thumb_opp.yaml" command="load"/>
    <rosparam file="$(find artificial_hands_bringup)/config/control/mia_hand_controllers.yaml" command="load"/>

    <!-- Spawn Mia hand controllers -->
    <node name="mia_hand_trajectory_ctrl_spawner" pkg="controller_manager" type="spawner" output="screen" args="mia_hand_vel_trajectory_controller" />

    <!-- Spawn Mia hand stopped controllers -->
    <node name="mia_hand_stopped_ctrl_spawner" pkg="controller_manager" type="spawner" output="screen" args="--stopped mia_hand_joint_group_vel_controller" />

  </group>

  <group unless="$(arg sim)">

    <!-- Make use of UR robot bringup from ur_robot_driver-->
    <include file="$(find ur_robot_driver)/launch/$(arg ur_robot)_bringup.launch" >
      <arg name="robot_ip" value="$(arg robot_ip)" />
      <arg name="kinematics_config" value="$(find artificial_hands_bringup)/config/kinematics_config_$(arg kinematics_config).yaml" />
      <arg name="robot_description_file" value="$(find artificial_hands_bringup)/launch/inc/load_mia_hand_on_$(arg ur_robot).launch.xml" />
      <arg name="controllers" default="joint_state_controller scaled_pos_joint_traj_controller force_torque_sensor_controller"/>
      <arg name="stopped_controllers" default="joint_group_vel_controller"/>
    </include>

    <group ns="mia_hand"> 

      <!-- Start the control node -->
	    <node name="Mia_hw_node" pkg="mia_hand_ros_control" type="Mia_hw_node" output="screen" launch-prefix="bash -c 'setserial /dev/ttyUSB$(arg Mia_COM) low_latency; sleep 1; $0 $@'">
        <param name="Mia_COM_" type="int" value="$(arg Mia_COM)"/> <!-- private param so as to match to the namespace used-->
        <param name="Mia_fs_" type="int" value="$(arg Mia_fs)"/> <!-- private param so as to match to the namespace used-->
      </node>

      <!-- Load joint controller configurations from YAML file to parameter server -->
      <rosparam file="$(find mia_hand_ros_control)/config/mia_hand_hw_controllers.yaml" command="load"/>
      <rosparam file="$(find mia_hand_ros_control)/config/mia_hand_hw_trajectory_controllers.yaml" command="load"/>
      <rosparam file="$(find artificial_hands_bringup)/config/control/mia_hand_controllers.yaml" command="load"/>

      <!-- Spawn Mia hand controllers -->
      <node name="mia_hand_trajectory_ctrl_spawner" pkg="controller_manager" type="spawner" output="screen" args="mia_hand_hw_vel_trajectory_controller"/>
      
      <!-- Spawn Mia hand stopped controllers -->
      <node name="mia_hand_trajectory_stopped_ctrl_spawner" pkg="controller_manager" type="spawner" output="screen" args="--stopped mia_hand_joint_group_vel_controller" />

      <!-- Spawn Mia hand joint state controller -->
      <node name="mia_hand_joint_state_controller_spawner" pkg="controller_manager" type="spawner" output="screen"  args="joint_state_controller" />

      <!-- Load Mia hand robot state publisher -->
      <node unless="$(arg Mia_hw_sim)" name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" />

      <!-- Load node for remapping of the thumb opposition -->
      <node unless="$(arg Mia_hw_sim)" name="remap_mia_joint_states" pkg="mia_hand_description" type="remap_mia_joint_states"/>

    </group>

    <!-- TO DO -->
    <include if="$(arg Mia_hw_sim)" file="$(find artificial_hands_bringup)/launch/mia_hand_hw_sim_bringup.launch" />

  </group>

  <!-- Load robot SRDF to the parameter server -->
  <arg name="moveit_config" value="mia_hand_on_$(arg ur_robot)_moveit_config" />
  <arg name="srdf_path" value="/config/mia_hand_on_$(arg ur_robot).srdf"/>
  <param name="/robot_description_semantic" type="str" textfile="$(eval find(moveit_config)+srdf_path)"/>

  <!-- Load other ur controllers to parameter server -->
  <rosparam file="$(find artificial_hands_bringup)/config/control/ur_controllers.yaml" command="load"/>

  <!-- Spawn stopped ur controllers -->
  <node name="cartesian_ctrl_spawner" pkg="controller_manager" type="spawner" output="screen" args="--stopped cartesian_motion_position_controller" />

  <!-- Load gui -->
  <node name="rqt_joint_trajectory_controller" pkg="rqt_joint_trajectory_controller" type="rqt_joint_trajectory_controller" />

</launch>